
<%= form_with(method: :get) do %>
  <div class="form-group d-flex align-items-center"> <!-- Utilisation de classes flexbox pour aligner les éléments -->
    <div> <!-- Div pour le label -->
      <%= label_tag :pokemon_id, "Nom Pokemon ou son ID :" %>
    </div>
    <div class="ml-3"> <!-- Div pour le champ de texte avec une marge à gauche -->
      <%= text_field_tag :name, params[:name], class: "form-control", placeholder: "Evoli / pop3-13" %>
    </div>
    <div class="ml-3"> <!-- Div pour le bouton de recherche avec une marge à gauche -->
      <%= submit_tag "Recherche", class: "btn btn-primary" %>
    </div>
  </div>
<% end %>

<style>
  #liste-elements ul {
    list-style-type: none; /* Enlève les puces de liste */
    padding-left: 0; /* Enlève le padding par défaut */
  }

  #liste-elements li {
    margin-bottom: 10px; /* Optionnel : Ajuste l'espacement entre les éléments */
  }
</style>

<div class="menu">
  <div class="dropdown">
    <input type="checkbox" id="dropdown">
    <label class="dropdown__face" for="dropdown">
      <div class="dropdown__text">Saisons</div>
      <div class="dropdown__arrow"></div>
    </label>
    <ul class="dropdown__items">
      <% @seasons.each do |season| %>
      <li>| <%= link_to season.season_name, request.params.merge(season_id: season.id), class: "button-87", data: { season_id: season.id } %> |</li>
      <% end %>
    </ul>
  </div>
</div>
<%# Code to have button of season or extension to find pokemon to add at the album %>

<!-- <div class="caroussel">
  <div id="caroussel_season" class="button-container">
    <span class="label">Seasons :</span>
    <% @seasons.each do |season| %>
      <%= link_to season.season_name, request.params.merge(season_id: season.id), class: "button-87", data: { season_id: season.id } %>
    <% end %>
  </div>
</div>-->

<div>
  <div class="button-container">
    <% unless @extensions.nil? %>
    <strong>Extensions : </strong>
    <br>
      <% @extensions.each do |extension| %>
  <%= link_to extension.extension_name, request.params.merge(extension_id: extension.id, type: nil), class: "button-87", style: "color: white; text-decoration: none;" %><%= " || " unless extension == @extensions.last %>
      <% end %>
    <% end %>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const dropdownItems = document.querySelectorAll('.dropdown__items li');
  const dropdownText = document.querySelector('.dropdown__text');
  const extensions = <%= @extensions.to_json %>; // Supposant que vous avez une représentation JSON des extensions

  dropdownItems.forEach(item => {
    item.addEventListener('click', function() {
      const seasonId = this.getAttribute('data-season-id');
      const associatedExtensions = extensions.filter(extension => extension.season_id == seasonId);

      // Générer les liens vers les extensions filtrées
      const extensionLinks = associatedExtensions.map(extension => {
        return `<a href="/votre-lien/${extension.id}" class="button-87">${extension.extension_name}</a>`;
      });

      // Mettre à jour le contenu de dropdown__text avec les liens générés
      dropdownText.innerHTML = extensionLinks.join('');
    });
  });
});
</script>
